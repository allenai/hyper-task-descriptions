# T5.1.1 Base model.
from __gin__ import dynamic_registration

from t5x import adafactor
from t5x import optimizers
from hyper_task_descriptions import utils as hyper_utils
from hyper_task_descriptions import learning_rate_adafactor
from flax import traverse_util

# gin that allows partial training based on regex matching.

# general defaults.
learning_rate_adafactor.Adafactor:
  decay_rate = 0.8
  step_offset = 0
  logical_factor_rules = @adafactor.standard_logical_factor_rules()

# ------------------- Partial loading ------------------------------------------------
OPTIMIZER = @optimizers.MultiOptimizer()
# note you can add more traversals if you want different optimizer settings
# for dfferent parts of the model.
# See https://github.com/google-research/t5x/blob/main/docs/usage/gin.md#scoping
# for how to create multiple specialised instances of the same class.
optimizers.MultiOptimizer:
  traversals_and_optimizers = ((@hyper/traverse_util.ModelParamTraversal(),
                                @hyper/learning_rate_adafactor.Adafactor()),
                                (@roberta/traverse_util.ModelParamTraversal(),
                                @roberta/learning_rate_adafactor.Adafactor()),
                                (@t5/traverse_util.ModelParamTraversal(),
                                @t5/learning_rate_adafactor.Adafactor()),)

# MultiOptimizer will match any parameter with a flattened name that
# matches *any* of the regular expressions in the list.
# hyper - we turn off param scaling, offset the step
hyper/learning_rate_adafactor.Adafactor:
  multiply_by_parameter_scale = False
  step_offset = 1100000
  learning_rate = 1e-5
hyper/traverse_util.ModelParamTraversal:
  filter_fn = @hyper/hyper_utils.match_any()
hyper/hyper_utils.match_any.regexes = [".*/hyper/[^e].*"]
# hyper encoder - state is fresh so reset step
roberta/learning_rate_adafactor.Adafactor:
  step_offset = 1100000
  learning_rate = 1e-3
roberta/traverse_util.ModelParamTraversal:
  filter_fn = @roberta/hyper_utils.match_any()
roberta/hyper_utils.match_any.regexes = [".*/hyper/e.*"]
# nothing special for this one
t5/learning_rate_adafactor.Adafactor:
  learning_rate = 1e-3
t5/traverse_util.ModelParamTraversal:
  filter_fn = @t5/hyper_utils.inverse_match_any()
t5/hyper_utils.inverse_match_any.regexes = [".*hyper.*"]
